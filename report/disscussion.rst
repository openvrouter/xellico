

.. _disscussion:

考察
====

全体の考察をする

Delayの考察
-----------

全体のDelayの計測に関しては特に考察することはない.
しかし, ``rte_delay_us_block()`` はかなり制度の高い遅延を発生させていることが
わかった. ブラックボックス試験と比較しても差分の小さい値を計算することができたのも、
この関数のおかげだと思う.

今回独自に作成した ``dirty_looped_delay()`` はあまり精度の良い結果を出さなかったの
でもう少し格闘したい. 汎用的な n * 10nsの遅延, のような感じだとうまくできなかったが,
10nsオンリーだったり, 50nsオンリーとかならできるかもしれない.
もう少し格闘しながら検討したい. (追加実験内容)

送受信関数の考察
----------------

これらの値であるが, あまりよい結果を出せたかがわからない.
計測するごとに数倍のさが出たりするので, 良い計測ができていない,
できれば, RSS有効時等にPCIeのパケットが増えすぎた影響で著しく性能低下することを
確認したい.

TxBufferの考察
--------------

delayを小さくした場合に影響がでるはずなのでそれについてしっかりと計り直す.
Wk部分が少ない時にしか意味がない気がするので, その理由について検討する.
単純に, 計算の支配項にならなかったというだけだと思うんだけどなあ.
1shotTxトランザクションの遅延が全体遅延のほんの一部である場合
Bulkにする必要がないからだと思う.
逆に, 100G等を想像した場合のTxトランザクションが支配項になる場合では,
複数のTxをまとめたBulkTxをするためにこれを活用する必要がありそう.
要するに, 40/100GbE環境でデータを取れば良いということではないだろうか.

RSSの考察
---------

10GbEレベルでは, RSSは理想的なロードバランス性能を出すことができる.
このため, コアの数さえおおくあれば, あらゆるVNFが10GbEのWirerateを
達成できることになる.
これはリニアなスケーラビリティを期待していたし, うまくいった.
パケットサイズを大きくすると. 余裕になるので, 遅延の量を多くしてやってみよう.
40GbEではリニアスケールしないらしいので, それは許容しておく.

今後の展望
----------

今回の実験では, RSS, TxBufferの試験を詳細に行うために, Xellico
というソフトウェアルータを開発した. 内部レイテンシの実験は,
Xellicoの実装内部に直接rdtscを用いた遅延計測コードを挿入したが,
これらの計測ごとにDPDKルータにコードを挿入するのは非常に困難な場合がある.
特にエンタープライズを想定するソフトウェアルータ等に今回のような
コード挿入を行うのはコストが高いため, できれば, 外部プロセスから
今回計測したような関数レイテンシを計測したい.

bcc/eBPFは高性能なトレーシングツールとして知られており, 今回の関数レイテンシ
の計測に利用できる可能性がある. ただ, 10GbE以上の制度を正確に計測できるか
が未知数であるため, 検討検証する必要がある.

また, XellicoでのRSSの構成変更等の設定はjsonファイルを
起動時に読み込むことで円滑に行うことができたが, 構成変更ごとに,
Jsonファイルの再編集, Xellicoの再起動を手作業で行う必要があったため
実験に時間がかかった.

openconfigdはルータ等のコンフィグ管理や起動管理を行うことができる
デーモンであり, Xellicoをopenconfigdに対応させることにより,
これらの問題を解決できるかもしれない.

X540のHW特性
-------------

x540だけの特別な情報があれば, 記す.

- TxBufferの問題
- TxBurstのちえんについて説明する
- RSSのスケーラビリティについて説明する.
- NUMA環境ではなぜ, 8500Mbpsを超えないのか.

  - おそらくソフトウェアレベルには問題がない
  - もっと言うと, ソフト的には送信が完了している
  - しかしHWがパケットを送りきれていないと思われる
  - HWトランザクション量と, 外部の計測器の値を比較することによりこれがわかる.


新たなVNFを実装したい場合において
---------------------------------

- いつも使うHWを調べる必要がある
- 楽に進めたい時に本研究を参考にする
- eBPFでは高速にこれらのデータが取れる
- benchmarkingつーるを作る必要があるかも -> Xellicoを活用?

マイクロレイテンシをより効率的に測る他の方法
--------------------------------------------

本研究では,TSCを用いたマイクロ遅延計測を実際にコード挿入を行うことにより
行なったが, これを細かくやっていると大変なため, これらのデータは自動取得ツールを
使うか, BCC等の外部アタッチ計測が可能な方法で行う必要がありそう.
BCCを使う場合は, タイマーはnano secオーダに対応しているため制度は良さそうだが,
kprobe等でフックされる場合のオーバヘッドを再検討する必要がある.
TSCを用いて地道に取得したデータとどれだけ差分が少なく計測をできるかを
測ることにより, これを見積もることができそう.


